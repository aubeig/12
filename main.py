import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from dotenv import load_dotenv
import requests
import json
import html

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
CREATOR = "@–°—ã—Ä–æ–∫"  # –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_themes = {}

# –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
THEMES = {
    "dark": {
        "name": "üåë –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¢—ë–º–Ω–∞—è",
        "bg": "#121212",
        "card": "#1e1e1e",
        "text": "#e0e0e0",
        "primary": "#bb86fc",
        "accent": "#03dac6"
    },
    "purple": {
        "name": "üíú –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –ì–∞–ª–∞–∫—Ç–∏–∫–∞",
        "bg": "#1a1a2e",
        "card": "#16213e",
        "text": "#e6e6e6",
        "primary": "#8a4fff",
        "accent": "#ff2e63"
    },
    "blue": {
        "name": "üî∑ –ì–ª—É–±–æ–∫–∏–π –û–∫–µ–∞–Ω",
        "bg": "#0f172a",
        "card": "#1e293b",
        "text": "#f1f5f9",
        "primary": "#3b82f6",
        "accent": "#06b6d4"
    }
}

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
def build_keyboard(user_id: int = None):
    theme_name = user_themes.get(user_id, "dark")
    theme = THEMES[theme_name]
    
    builder = InlineKeyboardBuilder()
    
    buttons = [
        ("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", "new_chat"),
        ("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", "change_theme"),
        ("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", "examples"),
        ("üë®‚Äçüíª –û —Å–æ–∑–¥–∞—Ç–µ–ª–µ", "about")
    ]
    
    for text, data in buttons:
        builder.add(InlineKeyboardButton(
            text=text,
            callback_data=data
        ))
    
    builder.adjust(2)
    return builder.as_markup()

# –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async def show_typing_animation(chat_id: int):
    await bot.send_chat_action(chat_id, "typing")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek-R1
async def get_ai_response(prompt: str, user_id: int):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": f"tg://user?id={user_id}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "deepseek/deepseek-r1:free",  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ R1
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1024
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content']
    except Exception as e:
        logger.error(f"API error: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    theme_name = user_themes.get(user_id, "dark")
    theme = THEMES[theme_name]
    
    welcome_msg = f"""
    <b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeepSeek AI Assistant!</b>
    
    –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ <b>DeepSeek-R1</b>.
    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await message.answer_chat_action("typing")
    await message.answer(
        text=welcome_msg,
        reply_markup=build_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    theme_name = user_themes.get(user_id, "dark")
    theme = THEMES[theme_name]
    
    await show_typing_animation(message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    response = await get_ai_response(message.text, user_id)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã
    safe_response = html.escape(response)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    formatted_response = f"""
    <b>ü§ñ DeepSeek-R1:</b>
    <blockquote>{safe_response}</blockquote>
    
    <i>üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–∏–∞–ª–æ–≥...</i>
    """
    
    await message.answer(
        text=formatted_response,
        reply_markup=build_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "change_theme")
async def change_theme(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    theme_buttons = InlineKeyboardBuilder()
    
    for theme_key, theme_data in THEMES.items():
        emoji = "‚úÖ" if user_themes.get(user_id) == theme_key else "‚ö™Ô∏è"
        theme_buttons.add(InlineKeyboardButton(
            text=f"{emoji} {theme_data['name']}",
            callback_data=f"set_theme_{theme_key}"
        ))
    
    theme_buttons.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    theme_buttons.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="main_menu"
    ))
    
    await callback.message.edit_text(
        text="<b>üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:</b>",
        reply_markup=theme_buttons.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ç–µ–º—ã
@dp.callback_query(F.data.startswith("set_theme_"))
async def set_theme(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    theme_key = callback.data.split("_")[-1]
    
    if theme_key in THEMES:
        user_themes[user_id] = theme_key
        theme = THEMES[theme_key]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
        await callback.answer(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {theme['name']}!", show_alert=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ç–µ–º–æ–π
        await callback.message.edit_text(
            text=f"<b>üé® –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n"
                 f"<i>{theme['name']}</i> —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞.\n\n"
                 "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π.",
            reply_markup=build_keyboard(user_id)
        )
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã", show_alert=True)

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "examples")
async def show_examples(callback: types.CallbackQuery):
    examples = """
    <b>üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
    
    ‚Ä¢ –ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò
    ‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    ‚Ä¢ –ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏
    ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –∏–¥–µ–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    ‚Ä¢ –ù–∞–ø–∏—à–∏ Python-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    
    await callback.message.edit_text(
        text=examples,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]])
    )
    await callback.answer()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
@dp.callback_query(F.data == "about")
async def show_about(callback: types.CallbackQuery):
    about_text = f"""
    <b>üë®‚Äçüíª –û —Å–æ–∑–¥–∞—Ç–µ–ª–µ</b>
    
    –≠—Ç–æ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω {CREATOR}
    
    <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
    ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram Bot API
    ‚Ä¢ –ò–ò-–º–æ–¥–µ–ª—å: DeepSeek-R1
    ‚Ä¢ –ë—ç–∫–µ–Ω–¥: Python + aiogram
    ‚Ä¢ –•–æ—Å—Ç–∏–Ω–≥: OpenRouter.ai
    
    <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
    üåë 3 —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    ‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    """
    
    await callback.message.edit_text(
        text=about_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]])
    )
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text(
        text="<b>‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_keyboard(user_id)
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    asyncio.run(main())
